import builtins from "builtin-modules";
import dotenv from "dotenv";
import esbuild from "esbuild";
import * as fs from "fs";
import process from "process";

dotenv.config();
const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;
const prod = (process.argv[2] === "production");
const exportToVault = (process.argv[3] === "export");
const moveStyles = {
	name: "move-styles",
	setup(build) {
		build.onEnd(() => {
			const path = prod ? "./dist/styles.css" : "./styles.css";
			fs.copyFileSync("plugin/styles.css", path);
		});
	}
};

const exportToVaultFunc = {
	name: "export-to-vault",
	setup(build) {
		build.onEnd(() => {
			if (prod && exportToVault) {
				const vaultPath = process.env.VAULT_PATH;
				const pluginManifest = JSON.parse(fs.readFileSync("./manifest.json", "utf-8"));
				const pluginId = pluginManifest.id;
				const pluginFolder = `${vaultPath}/.obsidian/plugins/${pluginId}`;
				if (!fs.existsSync(pluginFolder)) {
					fs.mkdirSync(pluginFolder, {recursive: true});
				}
				fs.copyFileSync("./dist/main.js", `${pluginFolder}/main.js`);
				fs.copyFileSync("./dist/styles.css", `${pluginFolder}/styles.css`);
				fs.copyFileSync("./manifest.json", `${pluginFolder}/manifest.json`);
			}
		});
	}
};


esbuild.build({
	banner: {
		js: banner,
	},
	entryPoints: ["plugin/main.ts", "plugin/styles.css"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	watch: !prod,
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	minify: prod,
	treeShaking: true,
	outdir: prod ? "./dist" : "./",
	plugins: [moveStyles, exportToVaultFunc],
}).catch(() => process.exit(1));

